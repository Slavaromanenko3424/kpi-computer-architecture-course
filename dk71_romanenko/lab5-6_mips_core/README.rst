=============================================
Лабораторна робота №5-6
=============================================

Тема
------

Створення та верифікація саморобного RISC ядра


Хід роботи
-------


	Пристрій здатен виконувати наступні інструкції:
	->add			->srl			->xor
	->sub			->ror			->beq
	->mul_h			->sra			->bne
	->mul_l			->rol			->j
	->div			->and			->lw
	->rem			->or			->sw
	->sll			->nor			->slt
Максимальна частота, на якій здатен працювати пристрій 7.22МГц. 


	Проект було вирішено створювати на мові Verilog,для економії часу , ніж створювати схему 
у схемному редакторі. Для спрощення роботи над пристроєм  було вирішено кожен блок створити в окремому файлі, що дуже сильно спростило збирання та
відладку пристрою.  Також тут було використано, АЛУ та регістровий файл з попередніх лабораторних робіт, які не потребували відладки, що також трохи 
спростило створення та відладку пристрою. Потім мною було написано тестовий файл на мові Verilog, що допомогло відладити пристрій.


	Майже всі вимоги, що були поставлені у завданні - виконано. Було створено таблицю ассемблерних інструкцій та відповідних їм опкодів, адже мій процесор
бінарно не сумісний з оригінальним ассемблером MIPS'а. В процесі верифікації корректності роботи інструкцій,  дійшов до висновку, що мати регістр, в якому завжди 
записаний нуль дуже зручно, тому перероблено регістровий файл і тепер при читанні з нульвого регістру ми завжди отримуємо нуль. Код зі свого "ассемблеру" 
транслював в машинний код вручну, але на майбутнє планується написання спеціальної програми яка це робитиме, що також дозволить додати ще декілька зручних 
можливостей. За допомогою Quest Timing Analysis визначив максимальну частоту для свого ядра - 7.22МГц.  Прапорці переповнення, нуля та переносу виведені 
на світлодіоди LEDR[2:0], також "шина" на якій знаходиться виконувана ядром інструкція виведена виходом, що дозволяє при потребі показувати, яка зараз інструкція 
виконується завдяк зовнішньому пристрою виводу. 
	Також мною була написана програма на мові ассемблер, яка знаходила добуток максимального на мінімальний елемент массиву, який знаходиться у пам'яті данних, 
куди цей массив було поміщено за допомогою функції $readmemb().



.. image:: media/mips_core_rtl.png
Так виглядає RTL схема цього ядра


.. image:: media/characteristics.png
Використані ресурси(можна оптимізувати)


.. image:: media/f_max.png
Максимальна частота


Висновки
-------

В результаті виконання даної лабораторної роботи було розроблено RISC подібне ядро. Дізналися багато про те, як влаштовані всередині, та як працюють ядра 
сучасних процесорів. 
P.S. За основу був взятий протокол О.Шліхти


