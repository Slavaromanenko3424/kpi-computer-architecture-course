// Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
// Created on Sat Sep 14 23:38:11 2019
`timescale 1ns/1ps

module register_file_tb;

reg CLK_sig;
reg ASRST_sig;
reg [4:0] READ_ADDR_A_sig = 0;
reg [4:0] READ_ADDR_B_sig = 0;
reg [4:0] WE_ADDR_sig = 0;
reg WE_sig;
reg [31:0] IN_DATA_sig = 0;
wire [31:0] OUT_DATA_A_sig;
wire [31:0] OUT_DATA_B_sig;

integer i = 0, test_data[31:0];

register_file register_file_inst
(
	.CLK(CLK_sig) ,	// input  CLK_sig
	.ASRST(ASRST_sig) ,	// input  ASRST_sig
	.READ_ADDR_A(READ_ADDR_A_sig) ,	// input [4:0] READ_ADDR_A_sig
	.READ_ADDR_B(READ_ADDR_B_sig) ,	// input [4:0] READ_ADDR_B_sig
	.WE_ADDR(WE_ADDR_sig) ,	// input [4:0] WE_ADDR_sig
	.WE(WE_sig) ,	// input  WE_sig
	.IN_DATA(IN_DATA_sig) ,	// input [31:0] IN_DATA_sig
	.OUT_DATA_A(OUT_DATA_A_sig) ,	// output [31:0] OUT_DATA_A_sig
	.OUT_DATA_B(OUT_DATA_B_sig) 	// output [31:0] OUT_DATA_B_sig
);

initial begin
	CLK_sig = 1'b0;
	forever #0.5 CLK_sig = ~CLK_sig;
end

initial begin
	WE_sig = 1'b0;
	ASRST_sig=1'b1;
	#0.5 ASRST_sig=1'b0;
	#1 ASRST_sig=1'b1;
	READ_ADDR_A_sig = 0;
	READ_ADDR_B_sig = 0;
	
	for(i = 0; i < 32;i = i + 1)
	begin
		#4
		READ_ADDR_A_sig = i;
		READ_ADDR_B_sig = i;
	end
	
	
	for(i = 0; i < 32;i = i + 1)
	begin
		WE_ADDR_sig = i;
		test_data[i] = $random;
		IN_DATA_sig = test_data[i];
		#2 WE_sig = 1'b1;
		#2 WE_sig = 1'b0;
	end

	#3 WE_sig = 1'b0;
 	WE_ADDR_sig = 4'b0000;
	IN_DATA_sig = 0;
	
	for(i = 0; i < 32;i = i + 1)
	begin
		#4
		READ_ADDR_A_sig = i;
		READ_ADDR_B_sig = i;
	end
end


initial begin
	#400 $stop();
end


endmodule
